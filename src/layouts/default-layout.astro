---
import "$lib/styles/app.css";

import AppBreadcrumb from "$lib/components/app-breadcrumb.svelte";
import AppFooter from "$lib/components/app-footer.svelte";

import { Toaster } from "$lib/components/ui/sonner";
import type { BreadcrumbItem } from "$lib/types";

import { ViewTransitions } from "astro:transitions";

import LoadingIndicator from "astro-loading-indicator/component";
import * as devalue from "devalue";

interface Props {
  class?: string;
  title: string;
  description?: string;
  breadcrumbs: BreadcrumbItem[];
}

const {
  class: classList,
  title,
  description,
  breadcrumbs: _breadcrumbs,
} = Astro.props;

const { login, session } = Astro.locals;
const valid = session?.valid ?? false;
const data = valid ? await session?.drive.fetchData() : undefined;

const state = { login, data, isValid: valid };
export type RemoteState = typeof state;

const loadingImages = Object.values(
  import.meta.glob<{ default: ImageMetadata }>("../assets/loading-*.gif", {
    eager: true,
  })
);
const loadingImage =
  loadingImages[Math.floor(Math.random() * loadingImages.length)]!.default;

const hostnameWithoutDomain =
  Astro.url.hostname.split(".").slice(0, -1).join(".") || Astro.url.hostname;

const breadcrumbs: typeof _breadcrumbs =
  Astro.url.pathname.split("/").length > 2
    ? [{ label: [{ label: "jadwal", href: "/jadwal" }] }, ..._breadcrumbs]
    : _breadcrumbs;
---

<html lang="en" transition:animate="slide">
  <head>
    <ViewTransitions fallback="swap" />
    <LoadingIndicator color="unset" height="4px" threshold={false} />

    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />

    <title>{`${title} @ ${hostnameWithoutDomain}`}</title>
    {description && <meta name="description" content={description} />}

    <link rel="preload" as="image" href={loadingImage.src} />
  </head>
  <body>
    <div
      class="flex flex-col justify-center container lg:w-3/4 min-h-[100vh] py-8"
    >
      <AppBreadcrumb client:load {breadcrumbs} />

      <main id="content" class:list={["flex-1 hidden", classList]}>
        <slot />
      </main>

      <div id="loading" class="flex items-center flex-1 self-center">
        <img
          class="object-cover max-h-[450px]"
          alt="loading..."
          src={loadingImage.src}
          style={{ height: Math.max(loadingImage.height, 450) + "px" }}
        />
      </div>

      <AppFooter client:load />
    </div>

    <Toaster client:only="svelte" richColors />
    <div id="state-data" class="hidden" data-value={devalue.stringify(state)}>
    </div>
  </body>
</html>

<script is:inline>
  document.addEventListener("astro:before-preparation", () => {
    document.querySelector("#loading").classList.remove("hidden");
    document.querySelector("main#content").classList.add("hidden");
  });
  document.addEventListener("astro:page-load", () => {
    document.querySelector("#loading").classList.add("hidden");
    document.querySelector("main#content").classList.remove("hidden");
  });
</script>

<script>
  import type { RemoteState } from "./default-layout.astro";

  import { state as localState, updateGoogleDriveData } from "$lib/stores";

  import { signIn } from "auth-astro/client";
  import * as devalue from "devalue";
  import { get } from "svelte/store";

  document.addEventListener("astro:page-load", async () => {
    const dataElement = document.querySelector("#state-data");
    if (!(dataElement instanceof HTMLElement)) return;

    const remoteState = devalue.parse(
      dataElement.dataset.value!
    ) as RemoteState;

    if (remoteState.login === undefined) {
      sessionStorage.removeItem("login");
      return;
    }

    sessionStorage.setItem("login", remoteState.login);
    if (remoteState.login !== "google") return;

    if (!remoteState.isValid) {
      await signIn("google");
      return;
    }

    const local = get(localState);
    const { data: remote } = remoteState;

    if (remote === undefined || remote.last_update < local.last_update) {
      console.log("[sync] local >> google-drive");
      await updateGoogleDriveData();
    } else if (remote.last_update > local.last_update) {
      console.log("[sync] google-drive >> local");
      localState.set(remote);
    }
  });
</script>

<style is:global>
  .astro-loading-indicator {
    background: linear-gradient(
      270deg,
      theme("colors.indigo.400") 25%,
      theme("colors.indigo.800") 50%,
      theme("colors.indigo.600") 25%
    );
  }
</style>
