---
import * as devalue from "devalue";

const { login, session } = Astro.locals;
const valid = session?.valid ?? false;
const data = valid ? await session?.drive.fetchData() : undefined;

const state = { login, data, isValid: valid, email: session?.user?.email };
export type RemoteState = typeof state;
---

<div id="state-data" class="hidden" data-value={devalue.stringify(state)}></div>

<script>
  import type { RemoteState } from "./app-data.astro";

  import { state as localState, updateGoogleDriveData } from "$lib/stores";

  import { signIn } from "auth-astro/client";
  import * as devalue from "devalue";
  import { get } from "svelte/store";

  document.addEventListener("astro:page-load", async () => {
    const dataElement = document.querySelector("#state-data");
    if (!(dataElement instanceof HTMLElement)) return;

    const remoteState = devalue.parse(
      dataElement.dataset.value!
    ) as RemoteState;

    if (remoteState.login === undefined) {
      sessionStorage.removeItem("login");
      return;
    }

    sessionStorage.setItem("login", remoteState.login);

    if (remoteState.login !== "google") return;
    else if (!remoteState.isValid || typeof remoteState.email !== "string") {
      await signIn("google");
      return;
    }

    // @ts-expect-error @types/umami is outdated, see https://umami.is/docs/tracker-functions#session-data
    window.umami?.identify({ email: remoteState.email });

    const local = get(localState);
    const { data: remote } = remoteState;

    if (remote === undefined || remote.last_update < local.last_update) {
      console.log("[sync] local >> google-drive");
      updateGoogleDriveData();
    } else if (remote.last_update > local.last_update) {
      console.log("[sync] google-drive >> local");
      localState.set(remote);
    }
  });
</script>
